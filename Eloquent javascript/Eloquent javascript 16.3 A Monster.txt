<link rel="stylesheet" href="css/game.css">
<style>.monster { background: purple }</style>

<body>
  <script>
    // Complete the constructor, update, and collide methods
        function above(actor1, actor2){
      let actor1X = actor1.pos.x,
          actor1Y = actor1.pos.y;
      let actor2X = actor2.pos.x,
          actor2Y = actor2.pos.y;
      let difX = actor1X - actor2X,
          difY = actor1Y - actor2Y;
      if (((difX < 1 && difX > 0) || 
          (difX > -1 && difX <= 0)) && 
          (difY < -1)){
        if ((difY >= -2) && (difY <= 0)) return true;
        return false;
      }
      return false;
    }
    
    State.prototype.update = function(time, keys) {
  let actors = this.actors
    .map(actor => actor.update(time, this, keys));
  let newState = new State(this.level, actors, this.status);
      let monsters = actors.filter(m => m.constructor.name == "Monster");
      
  if (newState.status != "playing") return newState;
  let player = newState.player;
  if (this.level.touches(player.pos, player.size, "lava")) {
    return new State(this.level, actors, "lost");
  }

  for (let actor of actors) {
    if (actor != player && overlap(actor, player)) {
      newState = actor.collide(newState);
    }
  }
    for(let monster of monsters){
        if(above(player, monster)){
          console.log("here");
          let newActors = actors.filter(m => m != monster);
          newState = new State(this.level, newActors, this.status);
        }
           }
  return newState;
};
    
    class Monster {
      constructor(pos,speed) {
        this.pos= pos;
        this.speed = speed;
      }

      get type() { return "monster"; }

      static create(pos) {
        return new Monster(pos.plus(new Vec(0, -1)), new Vec(3 ,0));
      }
      
      update(time, state) {
        let newPos = this.pos.plus(this.speed.times(time));
        if (!state.level.touches(newPos, this.size, "wall")){
          return new Monster(newPos, this.speed, this.reset);
        } else {
          return new Monster(this.pos, this.speed.times(-1));
        }
      }

      collide(state) {
        return new State(state.level, state.actors, "lost");
      }
    }

    Monster.prototype.size = new Vec(1.2, 2);

    levelChars["M"] = Monster;

    runLevel(new Level(`
..................................
.################################.
.#..............................#.
.#..............................#.
.#..............................#.
.#...........................o..#.
.#...@..........................#.
.##########..............########.
..........#..o..o..o..o..#........
..........#...........M..#........
..........################........
..................................
`), DOMDisplay);
  </script>
</body>